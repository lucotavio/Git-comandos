1 - Criando um repositorio
    git init

2 - Adicionando um arquivo não rastreado para área de stage
    ex: git add [nome-do-arquivo]

3 - Ver situação dos arquivos no repositorio do Git
    git status

4 - Adicionando varios arquivos não rastreado ao stage
    ex: git add .

5 - Comitando os arquivos que foram alterados
    git commit -m "[mensagem]"
    ex: git commit -m "Primeiro Commit"

6 - Adicionando varios arquivos não rastreados para área de stage e comitando os arquivos que foram alterados
    git commit -a -m "[mensagem]"
    ex: git commit -a -m "Primeiro Commit"

7 - Adicinando repositorio remoto do Git Hub
    git remote add origin [URl do repositorio]
    ex:git remote add origin https://github.com/luc-udemy/curso_git_1.git

8 - Enviando commits para o Git Hub
    git push -u origin main

9 - Buscando alterações no repositorio do Git Hub para sincronizar com repositorio remoto
    git pull

10 - Clonando repositorios do Git Hub
     git clone [URl do repositorio]
     ex: git clone https://github.com/luc-udemy/curso_git_1.git

11 - Deletando arquvos nomitorados
     git rm [nome-do-arquivo]
     ex: git rm Cliente.java

11 - Recuperando arquivos deletados
     1 - git reset HEAD
     2 - git checkout -- .

12 - Ver os Logs dos commits realizados
     git Logs

13 - Ver uma Determinada quantidade de registros do log
     git log -n [quantidade de registrosno log]
     ex git log -n 2

14 - Comparar as modificações nos arquivos alterados com os arquivos que foram commitado anteriormente
     git diff

14 - Comparar as modificações no arquivos alterados com os arquivos que foram commitado anteriormente
     git diff


14 - Comparar as modificações de um arquivo alterado com o arquivo que foi commitado anteriormente
     git diff [nome-do-arquivo]
     git diff index.html

14 - Comparar as modificações de um arquivo alterado na area de stage com o arquivo que foi commitado anteriormente
     git diff [nome-do-arquivo]
     git diff index.html

14 - Comparar as modificações de um arquivo alterado dentro e fora da area de stage com o arquivo que foi commitado anteriormente
     git diff HEAD

14 - Comparar as modificações entre dois commits
     git diff [codigo-hexadecimal]..[codigo-hexadecimal]
     ex: git diff 7eabc89..e3077c1

14 - Desfazendo mudanças em um arquivo rastreado, retirando ele da area de stage e preservando arquivo modificado
     git reset -- index.html

14 - Desfazendo mudanças em todos os arquivos na area de stage
     git reset --hard

14 - Desfazendo mudanças em arquivo já commitado
     git revert --no-edit [codigo-do-commit]
     ex: git revert --no-edit 6111116

14 - Vendo o codigo de todos os commits, os pais de todos os commits e a menssagem de todos os commits
     git log --oneline --decorate --parents

15 - Alterando nome de um arquivo
     git mv [nome-do-arquivo]
     git mv Pessoa.java Cliente.java

16 - Movendo arquivos para outra pasta
     git mv [nome-do-arquivo] [pasta/nome-do-arquivo]
     git mv Pessoa.java /entidade/Pessoa.java

20 - Resetando mudanças feitas tanto em arquivos commitados e arquivos não commitados
     git reset --hard [branch]
     ex: git reset --hard origin/main

17 - Desfazendo as mudaças feitas em um arquivo
     git checkout [nome-do-arquivo]
     ex: git checkout -- index.html

18 - Visualizando as branchs disponiveis
     git branch

18 - Visualizando as branchs disponiveis com mais informações
     git branch -v

19 - Criando uma nova branch
     git branch [nome-da-branch]
     ex: git branch crud_cliente
     OBS: Antes de fazer esse comando tenha sempre certeza que vc esta na branch main
          depois de o comando git pull, depois de fazer esses passos vc pode criar
          uma nova branch

20 - Mudando de Branch
     git checkout [nome-da-branch]
     git checkout main

21 - Deletando um branch sem commit
     git branch -d [nome-da-branch]
     ex: git branch -d crud_cliente

21 - Deletando um branch com commit
     git branch -D [nome-da-branch]
     ex: git branch -D crud_cliente

22 - Mudando de branch
     git checkout [nome-da-branch]
     ex: git checkout crud_cliente

23 - Criando e mudando de branch
     git checkout -b [nome-da-branch]
     ex: git checkout -b crud_cliente
     OBS: Antes de fazer esse comando tenha sempre certeza que vc esta na branch main
          depois de o comando git pull, depois de fazer esses passos vc pode criar
          uma nova branch

23 - Verificar branchs que não fizeram merge com a branch master
     git branch --no-merged

23 - Verificar branchs que já fizeram merge com a branch master
     git branch --merged

24 - Fazer merge de branch
     git merge [nome-da-branch] -m "menssagem"
     git merge crud_cliente -m "Mesclando com a branch master"
     OBS: Tenha certeza que voçê esta na branch main

25 - Mostrar as branchs remotas
     git branch -r

25 - Ver para quais commits as branchs remotas apontam
     git branch -r -v

25 - Mostrar as branchs remotas e locais
     git branch -a

25 - Compartilhando branchs
     git push [remota] [local]
     git push origin design

25 - Buscando, criando e mudando para uma branch local criada atraves de uma branch remota
     git checkout -b [nome-que-vai-ser-dado-a-branch] origin/[nome-da-branch-remota]
     ex: git checkout -b design origin/design

25 - Buscando, criando e mudando para uma branch local criada atraves de uma branch remota com o mesmo nome da branch remota,
     git checkout -t origin/[nome-da-branch-remota]
     ex: git checkout -t origin/design

25 - Fazendo merge de uma branch remota com uma branch local, ou seja, estamos buscando as codigo da branch remota que nao tem na branch local
     git merge origin/[nome-da-branch] -m "menssagem"
     ex: git merge origin/master -m "Mesclando origin/master em master"

25 - Deletando uma branch remota
     1 - Delete a branch local
     2 - git push origin :[nome-da-branch]
         ex: git push origin :design

25 - Salvar o codigo aual para prosseguir em uma nova abordagem
     git stash

26 - Listando as stashs
     git list stash

27 - Recuperando uma stash
     git stash apply [numero-da-stash]
     ex: git stash apply 0

28 - Observar as modificações que foram feitas na stash
     git stash show -p [numero-da-stash]
     ex: git stash show -p 1

29 - Remover todas as stashs
     git stash clear

30 - Remover uma stash especifíca
     git stash drop [numero-dastash]
     git stash drop 1

31 - Criando uma tag
     git tag -a [nome-da-tag] -m "[menssagem]"
     ex: git tag -a v1.0 -m "Primeira versao"
     OBS: Commitar a tag em seguencia

32 - Ver as Tags existentes
     git tag

33 - Mudar de tag
     git checkout [nome-da-tag]
     ex: git checkout v2.0

33 - Criando uma tag para um commit passado
     git tag [nome-da-tag] [codigo-hash]

34 - Enviar uma tag para o repositorio
     git push origin [nome-da-tag]
     ex: git push origin v3.0

35 - Enviando todas as tags para o repositório
     git push origin --tags

36 - Enviando branch para ser compartilhada
     git push --set-upstream origin [nome-da-funcionalidade]
     git push --set-upstream origin funcionalidade_a

37 - Buscando todos os branchs remotos
     git fetch -a
